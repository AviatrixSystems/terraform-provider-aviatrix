// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package goaviatrix

import (
	"context"
	"sync"
)

// Ensure, that ClientInterfaceMock does implement ClientInterface.
// If this is not the case, regenerate this file with moq.
var _ ClientInterface = &ClientInterfaceMock{}

// ClientInterfaceMock is a mock implementation of ClientInterface.
//
// 	func TestSomethingThatUsesClientInterface(t *testing.T) {
//
// 		// make and configure a mocked ClientInterface
// 		mockedClientInterface := &ClientInterfaceMock{
// 			AuditAccountFunc: func(ctx context.Context, account *Account) error {
// 				panic("mock out the AuditAccount method")
// 			},
// 			DeleteAccountFunc: func(account *Account) error {
// 				panic("mock out the DeleteAccount method")
// 			},
// 			GetAccountFunc: func(account *Account) (*Account, error) {
// 				panic("mock out the GetAccount method")
// 			},
// 		}
//
// 		// use mockedClientInterface in code that requires ClientInterface
// 		// and then make assertions.
//
// 	}
type ClientInterfaceMock struct {
	// AuditAccountFunc mocks the AuditAccount method.
	AuditAccountFunc func(ctx context.Context, account *Account) error

	// DeleteAccountFunc mocks the DeleteAccount method.
	DeleteAccountFunc func(account *Account) error

	// GetAccountFunc mocks the GetAccount method.
	GetAccountFunc func(account *Account) (*Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// AuditAccount holds details about calls to the AuditAccount method.
		AuditAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account *Account
		}
		// DeleteAccount holds details about calls to the DeleteAccount method.
		DeleteAccount []struct {
			// Account is the account argument value.
			Account *Account
		}
		// GetAccount holds details about calls to the GetAccount method.
		GetAccount []struct {
			// Account is the account argument value.
			Account *Account
		}
	}
	lockAuditAccount  sync.RWMutex
	lockDeleteAccount sync.RWMutex
	lockGetAccount    sync.RWMutex
}

// AuditAccount calls AuditAccountFunc.
func (mock *ClientInterfaceMock) AuditAccount(ctx context.Context, account *Account) error {
	if mock.AuditAccountFunc == nil {
		panic("ClientInterfaceMock.AuditAccountFunc: method is nil but ClientInterface.AuditAccount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account *Account
	}{
		Ctx:     ctx,
		Account: account,
	}
	mock.lockAuditAccount.Lock()
	mock.calls.AuditAccount = append(mock.calls.AuditAccount, callInfo)
	mock.lockAuditAccount.Unlock()
	return mock.AuditAccountFunc(ctx, account)
}

// AuditAccountCalls gets all the calls that were made to AuditAccount.
// Check the length with:
//     len(mockedClientInterface.AuditAccountCalls())
func (mock *ClientInterfaceMock) AuditAccountCalls() []struct {
	Ctx     context.Context
	Account *Account
} {
	var calls []struct {
		Ctx     context.Context
		Account *Account
	}
	mock.lockAuditAccount.RLock()
	calls = mock.calls.AuditAccount
	mock.lockAuditAccount.RUnlock()
	return calls
}

// DeleteAccount calls DeleteAccountFunc.
func (mock *ClientInterfaceMock) DeleteAccount(account *Account) error {
	if mock.DeleteAccountFunc == nil {
		panic("ClientInterfaceMock.DeleteAccountFunc: method is nil but ClientInterface.DeleteAccount was just called")
	}
	callInfo := struct {
		Account *Account
	}{
		Account: account,
	}
	mock.lockDeleteAccount.Lock()
	mock.calls.DeleteAccount = append(mock.calls.DeleteAccount, callInfo)
	mock.lockDeleteAccount.Unlock()
	return mock.DeleteAccountFunc(account)
}

// DeleteAccountCalls gets all the calls that were made to DeleteAccount.
// Check the length with:
//     len(mockedClientInterface.DeleteAccountCalls())
func (mock *ClientInterfaceMock) DeleteAccountCalls() []struct {
	Account *Account
} {
	var calls []struct {
		Account *Account
	}
	mock.lockDeleteAccount.RLock()
	calls = mock.calls.DeleteAccount
	mock.lockDeleteAccount.RUnlock()
	return calls
}

// GetAccount calls GetAccountFunc.
func (mock *ClientInterfaceMock) GetAccount(account *Account) (*Account, error) {
	if mock.GetAccountFunc == nil {
		panic("ClientInterfaceMock.GetAccountFunc: method is nil but ClientInterface.GetAccount was just called")
	}
	callInfo := struct {
		Account *Account
	}{
		Account: account,
	}
	mock.lockGetAccount.Lock()
	mock.calls.GetAccount = append(mock.calls.GetAccount, callInfo)
	mock.lockGetAccount.Unlock()
	return mock.GetAccountFunc(account)
}

// GetAccountCalls gets all the calls that were made to GetAccount.
// Check the length with:
//     len(mockedClientInterface.GetAccountCalls())
func (mock *ClientInterfaceMock) GetAccountCalls() []struct {
	Account *Account
} {
	var calls []struct {
		Account *Account
	}
	mock.lockGetAccount.RLock()
	calls = mock.calls.GetAccount
	mock.lockGetAccount.RUnlock()
	return calls
}
